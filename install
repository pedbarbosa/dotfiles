#!/bin/bash
verbose=false

function usage {
    echo "Enabled options are '-h' for this message and '-v' for for verbose mode"
}

function run () {
    if $verbose
    then
        if [[ `echo $@ | cut -c1-4` != "echo" ]]
        then
            echo "Executing $@..."
        fi
        "$@"
    else
        "$@" > /dev/null 2>&1
    fi
}

while getopts ":hv" OPTION
do
    case $OPTION in
        h) usage; exit 0 ;;
        v) verbose=true ;;
    esac
done
shift $(( OPTIND - 1 ))

# Check if Xcode is installed
# (Maybe replace with check 'xcode-select -p', which should return 0 if installed, 2 if missing)
if [[ ! -e /usr/bin/gcc ]]
then
    echo "Xcode isn't installed, please install from the App Store"
    exit 1
fi

# Update installer submodules
run echo "Updating installer submodules..."
git submodule update --init --recursive --remote

# Check if locate database exists
if [[ ! -e /var/db/locate.database ]]
then
    run echo "Requesting user password to build locate database..."
    run sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
else
    run echo "Locate database has already been set up"
fi

# Install homebrew if required
if [[ ! -e /usr/local/bin/brew ]]
then
    run echo "Installing homebrew..."
    run ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
else
    run echo "Homebrew has already been installed"
fi

# Install homebrew bottles
brew_bottles=( aria2 bash-completion cmake dos2unix fzf git ncdu openssl unrar vim wakeonlan watch wget )
for i in "${brew_bottles[@]}"
do
    if [[ ! -e "/usr/local/Cellar/$i" ]]
    then
        run echo "Installing $i homebrew bottle..."
        run brew install $i
    fi
done

# Install homebrew meld
if [[ ! -e "/usr/local/Cellar/meld" ]]
then
    run echo "Installing meld..."
    run brew install Caskroom/cask/xquartz
    run brew install homebrew/x11/meld
else
    run echo "Meld has already been installed"
fi

# Install python packages
pip_packages=( fabric setuptool termcolor virtualenvwrapper )
run echo "Checking required pip packages..."
for i in "${pip_packages[@]}"
do
    run pip list | grep -i $i
    if [[ ! $? -eq 0 ]]
    then
        run echo "Installing pip package $i..."
        run pip install $i
    fi
done

# Install Powerline fonts
run echo "Installing powerline fonts..."
run powerline-fonts/install.sh

# Syncronise dotfiles
run echo "Synchronising profile dotfiles..."
run rsync -r generic/ ~/
if [[ -e ~/Google\ Drive/Scripts/.zshrc_aliases ]]
then
    run cp ~/Google\ Drive/Scripts/.zshrc_aliases ~/
else
	echo "Couldn't find .zshrc_aliases, please add manually."
fi

# Configure VIm
run echo "Installing/updating vimplug... "
if [[ -f ~/.vim/autoload/plug.vim ]]; then
    run vim -esu ~/.vimrc +PlugUpgrade +qa || true
    run vim -esu ~/.vimrc +PlugClean! +qa || true
    run vim -esu ~/.vimrc +PlugUpdate +qa || true
else
    mkdir -p ~/.vim/autoload
    run curl -sSfLo ~/.vim/autoload/plug.vim \
        https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
fi

# Install or update oh-my-zsh
if [[ -d ~/.oh-my-zsh ]]
then
    run echo "Oh-my-zsh already installed, updating..."
    run cd ~/.oh-my-zsh
    run git reset --hard origin/master
    run git pull
    run cd -
else
    run echo "Installing oh-my-zsh..."
    run git clone https://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh
fi

# Change shell to zsh
if ! finger "$USER" | grep -q 'Shell.*zsh'
then
    run echo "Changing shell to zsh..."
    run chsh -s "$(which zsh)" "$USER"
else
    run echo "Shell already set up to zsh"
fi
